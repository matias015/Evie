import fs
import crypt


fn main(){
	args = arguments.getArguments()
	var cred = credential.credentialFromArguments(args)
	
	var action = args["action"]

	if action == "add"{
		add(args)
	}else if action == "list" {
		list()
	}else if action == "get" {
		get(args["p"])
	}else if action == "delete" {
		delete()
	}else{
		print("Accion no valida")
	}
}

fn add(args){
	var line

	

	var username = args["u"].addPaddingRight(" ",32)
	var platform = args["p"].addPaddingRight(" ",32)
	var length = args["l"].addPaddingRight(" ", 2)
	
	var cap = args["cap"] ? "1" : "0"
	
	var rev = args["r"] ? "1" : "0"

	var sym = args["sym"]

	line = platform + username + length + sym + cap + rev
	
	var file = fs.open("credentials.txt").appendLine(line).close()
}

fn list(){
	var f = fs.open("credentials.txt")

	loop {
		line = f.readLine()
		if line == "EOF"{
			break
		}
		var plat = line[:32]
		var usern = line[32:64]
		var len = line[64:66]
		var sym = line[66:67]
		var cap = line[67:68]
		var rev = line[68:69]
		print()
		print("Plataforma: " + plat.trim())
		print("Username: " + usern.trim())
		print("Lenght: " + len)
		print("Symbol: " + sym)
		print("Capitalize: " + cap == "1" ? "yes" : "no")

	}
	f.close()
}

fn delete(){

}

fn get(reqPlat){
	var f = fs.open("credentials.txt")

	

	var cred

	loop {
		line = f.readLine()
		if line == "EOF"{
			break
		}
		var plat = line[:32]


		# print(plat + "==" + plat)

		if plat.trim().is(reqPlat) {
			f.close()

			cred = credential.Credential{}

			cred.platform = reqPlat
			cred.username = line[32:64].trim()
			cred.lenght = number(line[64:66])
			cred.symbol = line[66:67]
			cred.capitalize = line[67:68] == "1" ? true : false
			cred.reverse = line[68:69]
			break
		}

	}

	if cred {
		generatePassword(cred)
	}else{
		print("NOT FOUNDED")
	}

	
}

fn generatePassword(cred){
	var word = cred.platform + "-" + cred.username
	hash = crypt.md5(ord)
	hash = "$" + hash[1:]
	print(hash)
}


main()
